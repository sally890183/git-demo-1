1.版本號
- git version

2.寫入使用者資訊
- git config --global user.name xxx
- git config --global user.email xxx@ccc.com

3.檢視設定資訊
- git config --list

4.將目錄新增版本控管
- git init

5.檔案狀態
-U (Untrack) 未被控管

6.控管狀態
- git status

7.加入控管
- git add <filename>
	- . (所有確認)
	- U (Untrack) ->A (added)已加入

8.看object編碼內容
- git cat-file -p 內容  sha-1 xxxxxx(前六碼 目錄+檔案名稱)
               -t 型態  sha-1 xxxxxx

8.檢視暫存區的檔案
- git ls-files -s

9.將暫存區資料儲存到倉庫
- git commit -m "第一次提交"

10.提交後產生兩個object
	- commit(sha-1) 
		- tree(sha-1)
			- files

11.檢視提交的commit
	- git log --oneline (一行為主)
		

12.控管檔案修改後
	U-> A -> M(modify)

13.使用vim編輯器
	- git commit 
		- i(進入編輯模式，開始編輯)		
		- esc鍵
			- 使用:wq (寫入並離開)
	
14.預設為Master分支
	- HEAD永遠會指向分支最新的commit obejct


15.手動刪除檔案
	- 恢復 : git restore 
	- 確認 : git add 


16.自動刪除檔案
	- git rm -f <filename>
	- 恢復 : git restore --staged <file>
		- 需要進行git restore/add 

17.將檔案移出暫存/倉庫
	- git rm --cached <filename>
		- 檔案轉換成Untrack模式

18.檢視目前分支
	- git branch
		- 新增 <branch-name>
	- git branch -D <branch-name>
		- 刪除分支(需切換到其他分支)	
	- git branch -m <old> <new>
	 
19.切換分支
	- git checkout <branch-name>
	- git checkout -b <branch-name>
		- 新增分支跟切換

20.合併分支
  	- git merge <branch-name>
		- 需切換到其他分支(master)	

	- git merge --abort
		- 取消合併	
	
	- 衝突合併(需確認已誰為主)

21.切換commit 
	- git checkout commit-object
	- 回到過去的修正
		- git checkout -b  dev2
		- git add .
		- git commit

		- 進行20.合併分支

	- 切換最後可以使用git checkout master
		
22.回到過去的commit
	- git reset commit-object
	- git reset --hard commit-object


23.顯示所有的歷程
	- git reflog


24.修改後恢復

1.git checkout .

2.git reset --hard HEAD

3.git reset --hard HEAD~2

4.git reset --hard commit-object

25.反悔reset
- git reset --hard ORIG_HEAD


26.檢視遠端的倉庫url
- git remote -v
- git remote add origin https://github.com/17app001/git-demo1.git


27.git push
	-本地端推送遠端倉庫
	- 第一次遠端需要產生分支
		- git push origin -u master
	- 第二次後可直接push	
		- git push    =>(master=>master)


28.git演練
- 切換分支到master 
- 將dev分支合併到master
- 更新到雲端master分支	
- 刪除本地dev分支

- 使用到指令
(git checkout/log/branch/push/merge)


29.git pull







